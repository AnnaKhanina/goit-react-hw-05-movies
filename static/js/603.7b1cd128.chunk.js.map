{"version":3,"file":"static/js/603.7b1cd128.chunk.js","mappings":"4MAEaA,E,QAAuBC,EAAAA,IAAH,mG,oECkFjC,EA5EkB,WAAO,IAAD,IACtB,GAA0BC,EAAAA,EAAAA,UAAS,CAAC,GAApC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAA4BF,EAAAA,EAAAA,WAAS,GAArC,eAAOG,EAAP,KAAeC,EAAf,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAGFE,EAAQ,qBADGC,EAAAA,EAAAA,MACSC,aAAZ,aAAG,EAAgBC,YAAnB,QAA2B,KAEzCC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAQP,GAASQ,MAAK,SAAAC,GACpBZ,EAASY,EAAOC,MAChBX,GAAU,EACX,GACF,GAAE,CAACC,IACJ,IAAQW,EACNf,EADMe,MAAOC,EACbhB,EADagB,YAAaC,EAC1BjB,EAD0BiB,aAAcC,EACxClB,EADwCkB,WAAYC,EACpDnB,EADoDmB,SAAUC,EAC9DpB,EAD8DoB,OAE1DC,EAAQ,yCAAqCL,GAC7CM,EAAc,IAAIC,KAAKN,GAAcO,cAC3C,OACE,2BACGtB,GACC,iCACE,UAAC,KAAD,CAAMuB,GAAInB,EAAV,WACE,SAAC,MAAD,CAAaoB,KAAK,KAAKC,MAAM,WAD/B,WAIA,UAAC9B,EAAD,YACE,gBAAK+B,IAAKP,EAAUQ,MAAM,MAAMC,IAAKf,KACrC,4BACE,0BACGA,EADH,KACYO,EADZ,QAGA,yCAAiBS,KAAKC,MAAMd,GAA5B,QACA,sCACA,uBAAIC,KACJ,mCACCC,EAAOa,KAAI,SAAAC,GACV,OAAO,uBAAmBA,EAAMC,MAAjBD,EAAME,GACtB,WAGL,mBACA,mDACA,2BACE,yBACE,SAAC,KAAD,CAAMX,GAAG,OAAOjB,MAAO,CAAEC,KAAMH,GAA/B,qBAIF,yBACE,SAAC,KAAD,CAAMmB,GAAG,UAAUjB,MAAO,CAAEC,KAAMH,GAAlC,2BAKJ,sBAGF,SAAC,KAAD,CACI+B,OAAO,MACPR,MAAM,MACNF,MAAM,UACNW,aAAc,CAAC,EACfC,aAAa,GACbC,SAAS,EACTC,UAAU,yBACVC,iBAAiB,GACjBC,iBAAiB,GACjBC,kBAAkB,MAGxB,SAAC,KAAD,MAGL,C,4MChFKC,EAAM,mCAEZC,IAAAA,SAAAA,QAAyB,+BAElB,IAAMC,EAAW,mCAAG,WAAMC,GAAN,uFACFF,IAAAA,IAAA,sCACUD,EADV,iBACsBG,IAFpB,cACnBC,EADmB,yBAIlBA,EAASnC,MAJS,2CAAH,sDAOXH,EAAO,mCAAG,WAAMyB,GAAN,uFACEU,IAAAA,IAAA,iBACXV,EADW,oBACGS,EADH,oBADF,cACfI,EADe,yBAIdA,GAJc,2CAAH,sDAOPC,EAAU,mCAAG,WAAMd,GAAN,uFACDU,IAAAA,IAAA,gBACZV,EADY,4BACUS,EADV,2BADC,cAClBI,EADkB,yBAIjBA,EAASnC,KAAKqC,SAJG,2CAAH,sDAOVC,EAAU,mCAAG,WAAMhB,GAAN,uFACDU,IAAAA,IAAA,iBACXV,EADW,4BACWS,EADX,oBADC,cAClBI,EADkB,yBAIjBA,EAASnC,KAAKuC,MAJG,2CAAH,sDAOVC,EAAc,mCAAG,WAAON,EAAMO,GAAb,uFACLT,IAAAA,IAAA,+BACGD,EADH,kBACgBU,EADhB,iBAC8BP,IAFzB,cACtBC,EADsB,yBAIrBA,EAASnC,MAJY,2CAAH,uD","sources":["components/MovieAboutItem/MovieAboutItem.styled.jsx","pages/MovieDetails.jsx","services/getMovies.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const MovieAboutItemStyled = styled.div`\n  display: flex;\n  gap: 10px;\n\n  & > div {\n    max-width: 400px;\n  }\n`;\n","import { MovieAboutItemStyled } from 'components/MovieAboutItem/MovieAboutItem.styled';\nimport { getInfo } from '../services/getMovies';\nimport { useState, useEffect } from 'react';\nimport { useParams, Outlet, useLocation } from 'react-router-dom';\nimport { ThreeCircles } from 'react-loader-spinner';\nimport { Link } from 'react-router-dom';\nimport { BiArrowBack } from 'react-icons/bi';\n\nconst MovieInfo = () => {\n  const [movie, setMovie] = useState({});\n  const [isLoad, setIsLoad] = useState(false);\n  const { movieId } = useParams();\n\n  const location = useLocation();\n  const backLink = location.state?.from ?? '/';\n\n  useEffect(() => {\n    getInfo(movieId).then(result => {\n      setMovie(result.data);\n      setIsLoad(true);\n    });\n  }, [movieId]);\n  const { title, poster_path, release_date, popularity, overview, genres } =\n    movie;\n  const imageURL = `https://image.tmdb.org/t/p/w500${poster_path}`;\n  const releaseYear = new Date(release_date).getFullYear();\n  return (\n    <div>\n      {isLoad ? (\n        <>\n          <Link to={backLink}>\n            <BiArrowBack size=\"14\" color=\"tomato\" />\n            Back\n          </Link>\n          <MovieAboutItemStyled>\n            <img src={imageURL} width=\"400\" alt={title} />\n            <div>\n              <h1>\n                {title} ({releaseYear})\n              </h1>\n              <h2>Popularity: {Math.round(popularity)} </h2>\n              <h2>Overview</h2>\n              <p>{overview}</p>\n              <h2>Genres</h2>\n              {genres.map(genre => {\n                return <p key={genre.id}>{genre.name}</p>;\n              })}\n            </div>\n          </MovieAboutItemStyled>\n          <hr />\n          <p>Additional information</p>\n          <ul>\n            <li>\n              <Link to=\"cast\" state={{ from: backLink }}>\n                Cast\n              </Link>\n            </li>\n            <li>\n              <Link to=\"reviews\" state={{ from: backLink }}>\n                Reviews\n              </Link>\n            </li>\n          </ul>\n          <hr />\n        </>\n      ) : (\n        <ThreeCircles\n            height=\"100\"\n            width=\"100\"\n            color=\"#4fa94d\"\n            wrapperStyle={{}}\n            wrapperClass=\"\"\n            visible={true}\n            ariaLabel=\"three-circles-rotating\"\n            outerCircleColor=\"\"\n            innerCircleColor=\"\"\n            middleCircleColor=\"\"\n            />\n      )}\n      <Outlet />\n    </div>\n  );\n};\n\nexport default MovieInfo;","import axios from 'axios';\n\nconst KEY = '3e0adcf7517a0f187185de79b0c950b8';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nexport const getTrending = async page => {\n  const response = await axios.get(\n    `/trending/movie/day?api_key=${KEY}&page=${page}`\n  );\n  return response.data;\n};\n\nexport const getInfo = async id => {\n  const response = await axios.get(\n    `/movie/${id}?api_key=${KEY}&language=en-US`\n  );\n  return response;\n};\n\nexport const getReviews = async id => {\n  const response = await axios.get(\n    `movie/${id}/reviews?api_key=${KEY}&language=en-US&page=1`\n  );\n  return response.data.results;\n};\n\nexport const getCredits = async id => {\n  const response = await axios.get(\n    `/movie/${id}/credits?api_key=${KEY}&language=en-US`\n  );\n  return response.data.cast;\n};\n\nexport const getSearchQuery = async (page, query) => {\n  const response = await axios.get(\n    `search/movie?api_key=${KEY}&query=${query}&page=${page}`\n  );\n  return response.data;\n};"],"names":["MovieAboutItemStyled","styled","useState","movie","setMovie","isLoad","setIsLoad","movieId","useParams","backLink","useLocation","state","from","useEffect","getInfo","then","result","data","title","poster_path","release_date","popularity","overview","genres","imageURL","releaseYear","Date","getFullYear","to","size","color","src","width","alt","Math","round","map","genre","name","id","height","wrapperStyle","wrapperClass","visible","ariaLabel","outerCircleColor","innerCircleColor","middleCircleColor","KEY","axios","getTrending","page","response","getReviews","results","getCredits","cast","getSearchQuery","query"],"sourceRoot":""}